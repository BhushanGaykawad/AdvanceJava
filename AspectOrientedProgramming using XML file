//Product Class

package mypack;
public interface Product
{
    int multiply(int a,int b);
}


//ProductImpl
package mypack;
public class ProductImpl implements Product
{
    public int multiply(int a, int b)
    {
    	System.out.println("inside multiply");
        return a*b;
    }
}

//  After advice

package mypack;
import java.lang.reflect.Method;
import org.springframework.aop.AfterReturningAdvice;
public class LogAfterReturning implements AfterReturningAdvice
{
    public void afterReturning(Object o, Method method, Object[] os, Object o1) throws Throwable 
    {
        System.out.println("After Normal Return from a method");
    }
}

//before advice
package mypack;
import java.lang.reflect.Method;
import org.springframework.aop.MethodBeforeAdvice;

// it's a "before" advice

public class LogBeforeCall implements MethodBeforeAdvice
{
    public void before(Method method, Object[] os, Object o) throws Throwable
    {
        System.out.println("Before Calling the Method");
    }
}

//Around advice
package mypack;

import org.aopalliance.intercept.MethodInterceptor;
import org.aopalliance.intercept.MethodInvocation;

public class LogAround implements MethodInterceptor
{
    public Object invoke(MethodInvocation mi) throws Throwable
    {
    	System.out.println("beginning of invoke");
        Object arg[]=mi.getArguments();
        int num1=(Integer)arg[0];
        int num2=(Integer)arg[1];
        if(num1==0 && num2==0)
        {
            throw new Exception("Cannot Multiply 0 with 0");
        }
        Object result=mi.proceed();  // as a around advice you should allow "business method" to get executed
        System.out.println("after proceed");
        return result;
        }
    }

//Main class

package mypack;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Main {
    public static void main(String[] args)
    {
        ApplicationContext ac=new ClassPathXmlApplicationContext("aopdemo.xml");
        Product product=(Product)ac.getBean("product");
System.out.println(product.getClass().getName());
        int result=product.multiply(10,20);
        System.out.println("First Result\t"+result);
       
    }
}












